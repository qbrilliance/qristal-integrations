variables:
  CI_IMAGE: registry.gitlab.com/qbau/software-and-apps/ci-dockerfiles/ubuntu-22.04:sdk-4
  SDK_VERSION: v1.1.0
  SDK_TAG: registry.gitlab.com/qbau/software-and-apps/public/qbsdk 

stages:
  - build
  - test
  - deploy

.install-core:
  before_script:
    - echo $PWD
    - ls *
    - whoami
    - export ORIG=$PWD
    - export ARTEFACTS_DIR=$PWD/../core
    - rm -rf ${ARTEFACTS_DIR} ${QB_DIR}/core-local
    - mv core_artefacts ${ARTEFACTS_DIR}
    - cmake --install ${ARTEFACTS_DIR}/build
    - cd $ORIG  
  
nextflow-build:
  stage: build
  needs:
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: "main"
      artifacts: true
  extends: .install-core
  image: $CI_IMAGE
  script:
    - echo "*"
    - echo "* Introduction to Nextflow test"
    - echo "*"
    - START_DIR=`pwd`
    - cd nextflow/introduction
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core-local
    - make install
    - cd ${QB_DIR}/core-local/examples/cpp/vqe_opt_hpc_app
    - mkdir build
    - cd build
    - cmake ..
    - make
    - echo "*"
    - echo "* QM/MM H20-H2 simple test"
    - echo "*"
    - cd ${QB_DIR}/core-local/examples/cpp/vqeeCalculator
    - mkdir build
    - cd build
    - cmake ..
    - make
    - echo "*"
    - echo "* Setting up artifacts for dependent tasks to consume"
    - echo "*"
    - cd ${START_DIR}
    - mkdir nextflow-build-artifacts
    - cp -pr ${QB_DIR}/core-local/examples/cpp/vqeeCalculator nextflow-build-artifacts/.
    - cp -pr ${QB_DIR}/core-local/examples/cpp/vqe_opt_hpc_app nextflow-build-artifacts/.
  artifacts:
    paths:
      - nextflow-build-artifacts/

run-nextflow-examples:
  stage: test
  needs:
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: "main"
      artifacts: true
    - job: nextflow-build
      artifacts: true
  extends: .install-core
  image: $CI_IMAGE
  script:
    - export PATH="${HOME}"/.local/bin:"${PATH}"
    - cp -pr nextflow-build-artifacts/vqe_opt_hpc_app ${QB_DIR}/core-local/examples/cpp/.
    - export OPT_APP_DIR=${QB_DIR}/core-local/examples/cpp/vqe_opt_hpc_app/build
    - cd $ORIG/nextflow/introduction
    - NQPUS=2
    - NATOMS=$(cat ../../tests/nextflow/introduction/2-hydrogen.geo | wc -l)
    - echo "Run with Nextflow"
    - nextflow run main.nf -profile standard --bin_dir "${OPT_APP_DIR}"
    - echo "Run without Nextflow"
    - cat ../../tests/nextflow/introduction/2-hydrogen.geo | mpiexec --allow-run-as-root -n $NQPUS $OPT_APP_DIR/vqe_opt_hpc_app --n-hydrogens $NATOMS --n-virtual-qpus $NQPUS
  artifacts:
    when: always
    paths: 
      - nextflow/introduction/all_results.log

ci-py-nextflow-tests:
  stage: test
  needs:
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: "main"
      artifacts: true
    - job: nextflow-build
      artifacts: true
  extends: .install-core
  image: $CI_IMAGE
  script:    
    - export PATH="${HOME}"/.local/bin:"${PATH}"
    - export QRISTAL_INSTALL_DIR=${QB_DIR}/core-local
    - export NF_RESOURCES=$ORIG/nextflow/introduction
    - echo "Simple Nextflow Python test"
    - python3 -m pip install nextflowpy==0.5.0
    - cp -pr nextflow-build-artifacts/vqe_opt_hpc_app ${QB_DIR}/core-local/examples/cpp/.
    - cd $ORIG/tests/nextflow/introduction
    - python3 -m pytest run.py
    - echo "QM/MM test"
    - cd $ORIG
    - cp -pr nextflow-build-artifacts/vqeeCalculator ${QB_DIR}/core-local/examples/cpp/.
    - cd nextflow/q_chemistry
    - python3 qm_mm.py -f 0.3 -p -q 2 -c ${QB_DIR}/core-local/examples/cpp/vqeeCalculator/build/vqeeCalculator
    - ase gui -n -1 opt.traj -o ../../tests/nextflow/q_chemistry/last.xyz
    - cd ../../tests/nextflow/q_chemistry
    - python3 -m pytest --junitxml="report-qmmm.xml"
  artifacts:
    when: always
    reports:
      junit: tests/nextflow/q_chemistry/report-qmmm.xml

test-docker-integration:
  stage: test
  tags: ["lambda"]
  when: manual
  script:
    # Test build the integrations Docker image.
    - cd docker/qristal
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build --build-arg SDK_VERSION=$SDK_VERSION --progress=plain --no-cache --tag $SDK_TAG . 
